<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--装配业务层对象-->
    <bean id="userService" class="edu.nf.ch16.service.Impl.UserServiceImpl"/>
    <!--装配切面类-->
    <bean id="userServiceAspect" class="edu.nf.ch16.aspect.UserServiceAspect"/>
    <!--配置Aop-->
    <aop:config>
        <!--定义切入点-->
        <aop:pointcut id="myPointcut" expression="execution(* edu.nf.ch16.service.Impl.*.*(..))"/>
        <!--配置切面 ref引用上面配置的id-->
        <aop:aspect ref="userServiceAspect">
            <!--配置各种通知,.method指定切面类中对应的方法名
            Pointcut-ref引用切入点的id
            通常pointcut-ref引用的都是同一个切入点表达式，
            当某个通知相应自定义切点表达式的时候
            可以通过pointcut属性重新自定义，例如：pointcut="execution（...）"-->
            <aop:before method="before" pointcut-ref="myPointcut"/>
            <aop:around method="around" pointcut-ref="myPointcut"/>
            <!--后置通知中的returning对应的是afterReturning的返回值参数名（名称一致）-->
            <aop:after-returning method="afterReturning" pointcut-ref="myPointcut" returning="returnVal"/>
            <!--throwing对应afterThrowing方法的异常参数名（名称要一致）-->
            <aop:after-throwing method="afterThrowing" pointcut-ref="myPointcut" throwing="e"/>
            <aop:after method="after" pointcut-ref="myPointcut"/>
        </aop:aspect>
    </aop:config>
</beans>